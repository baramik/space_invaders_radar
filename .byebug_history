exit
radar_matrix.to_a
radar_matrix.to_a.map { |row| "#{row.join}\n" }.join
radar_matrix.to_a.count
radar_matrix.count
radar_matrix
continue
radar_matrix
exit
result
continue
result
exit
result.reject {|i| i == false}.count
result.count
result.uniq
result
exit
levenshtein_distance
score
exit
mapped_invaders.first.height
mapped_invaders.last.height
mapped_invaders.last
invader.height
start_row
radar_matrix.minor(start_row..end_row, start_column..end_column)
radar_matrix
end_column
start_column
end_row
start_row
continue
exit
next
radar_matrix 
next
radar_object
next
radar_matrix
next
continue
score
continue
score
continue
Levenshtein.normalized_distance('asd', 'asd')
Levenshtein.normalized_distance('asd', 'as')
score
continue
score
continue
score
continue
score
continue
to_compare
score
next
score
next
score
threshold
next
scan_window
next
score
exit
score
exit
Levenshtein.normalized_distance
Levenshtein.ffi_distance
require 'levenshtein'
Levenshtein.ffi_distance
Levenshtein.methods
Levenshtein.normalized_distance
continue
score
continue
score
continue
score
continue
score
continue
score
continue
score
continue
score
continue
score
exit
scan_window
next
exit
radar_object
mm = matr.minor(0..1, 0..1)
invader.width - 1
invader.height - 1
mm.count
mm = matr.minor(0..invader.height - 1, 0..invader.width - 1)
m = matr.minor(0..invader.height - 1, 0..invader.width - 1)
matr.minor(0..invader.height - 1, 0..invader.width - 1)
matr.minor(0..invader.height - 1)
matr
scan_window(mapped_radar_map, row_idx, invader.height - 1, column_idx, invader.width - 1)
matr = mapped_radar_map.to_matrix
mapped_radar_map.to_matrix
mapped_radar_map
invader.height
exit
to_comparable_string(compare_target)
to_comparable_string(to_compare)
to_compare
score
threshold
continue
result_map
continue
available_invaders.last.width
available_invaders.last.height
available_invaders.first.width
available_invaders.first.height
radar_object.height
radar_object.width
radar_object
available_invaders.first.height
available_invaders.first.width
available_invaders.first 
available_invaders.count
available_invaders
next
radar_object.width
radar_object.height
radar_object
continue
file_entities.first.split("\n").map { |entity| entity.split("") }
file_entities.first.split("\n").count
file_entities.first.split("\n")
file_entities.count
file_entities
entities.count
entities
next
file_content
cont
cont.flatten
cont.last.count
cont.last
cont.count
cont = radar_object.send :content
radar_object.count
radar_object
continue
radar_object.send :content
radar_object.width
radar_object.height
radar_object
continue
radar_object.content
radar_object
continue
file_entities[0].split("\n")
file_entities[0].split('\n')
file_entities[0].split(\n)
file_entities
continue
content = file_string.split("~~~~")
cont.first.split("\n")
cont = content.map(&:strip).reject(&:empty?)
content.
content.map(&:strip).reject(&:empty?).count
content = file_string.split("~~~~")
file_string
content.map(&:strip).reject(&:empty?).count
content.map(&:strip).reject(&:empty?)
content.map(&:strip).reject(&:blank?)
content.map(&:strip)
content[3]
content[2]
content[1]
contennt[1]
content.second
content.first
content.last
content = file_string.split("~~~~\n")
file_string.split("~~~~\n").count
file_string.split("~~~~\n")
file_string.split("~~~~")
file_string.split("~~~~").compact("")
file_string.split("~~~~").compact
file_string.split("~~~~").count
file_string.split("~~~~")
file_string.length
file_string
continue
s.split("")
s = File.read(path)
entities .count
entities 
delimiter_count
next
line
next
line
next
line
delimiter_count
next
line
delimiter_count
line
next
line
next
line
next
line
next
line
next
line
next
line
next
line
next
found_entity
next
ls
next
continue
entities.count
entities
line
delimiter_count
found_entity
next
found_entity
next
found_entity
next
found_entity
next
found_entity
next
line
next
found_entity
delimiter_count
line
continue
line
entities.count
entities
